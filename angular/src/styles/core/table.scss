table.properties {
  border-collapse: collapse;
  border-spacing: 0;
  border-radius: 2px;

  &.is-full-width {
    width: 100%;
  }

  &.is-fixed-layout {
    table-layout: fixed;
  }

  thead > {
    vertical-align: middle;
    border-color: inherit;

    tr {
      vertical-align: inherit;
      border-color: inherit;
    }

    tr > th,
    td {
      font-size: 12px;
      font-weight: 500;
      text-align: left;

      [dir="rtl"] & {
        text-align: right;
      }

      text-transform: uppercase;
      line-height: 28px;
      padding: 5px 15px;
    }
  }

  tbody > tr > {
    th,
    td {
      padding: 5px 15px;
      text-align: left;

      [dir="rtl"] & {
        text-align: right;
      }

      line-height: 24px;
      vertical-align: top;

      @media (max-width: 480px) {
        &:before {
          // content: **ADD TABLE HEADER**;
          display: inline-block;
        }
      }
    }

    td {
      letter-spacing: 0.3px;
    }

    th {
      text-align: right;

      [dir="rtl"] & {
        border-right: none;
        text-align: left;
      }

      font-size: 16px;
      font-weight: 600;
      max-width: 100px;
    }

    :last-child td {
      border: none;

      @media (max-width: 480px) {
      }
    }
  }
}

table {
  &.simple {
    width: 100%;
    border: none;
    border-spacing: 0;
    text-align: left;

    thead {
      tr {
        th {
          padding: 16px 8px;
          font-weight: 600;
          white-space: nowrap;

          &:first-child {
            padding-left: 24px;
          }

          &:last-child {
            padding-right: 24px;
          }
        }
      }
    }

    tbody {
      tr {
        td {
          padding: 16px 8px;

          &:first-child {
            padding-left: 24px;
          }

          &:last-child {
            padding-right: 24px;
          }
        }

        &:last-child {
          td {
            border-bottom: none;
          }
        }
      }
    }

    &.clickable {
      tbody {
        tr {
          cursor: pointer;
        }
      }
    }
  }
}

$black: #0a1014;
$offwhite: #fafafa;
$lightgray: #dbdbdb;
$darkgray: #444444;

table.properties {
  box-shadow: 0 2px 2px rgba($black, 0.24), 0 0 2px rgba($black, 0.12);
  background: $offwhite;

  thead > {
    tr > th,
    td {
      background: rgba($lightgray, 0.2);
      border-bottom: 1px solid $lightgray;
      color: $darkgray;
    }
  }

  tbody > tr > {
    th,
    td {
      border-bottom: 1px solid $lightgray;
    }

    td {
      tr td:first-child {
        @media (max-width: 480px) {
          // background-color: $lightgray;
        }
      }
    }

    th {
      background: rgba($lightgray, 0.2);
      border-right: 1px solid $lightgray;

      [dir="rtl"] & {
        border-left: 1px solid $lightgray;
      }
    }

    :last-child td {
      @media (max-width: 480px) {
        border-bottom: 1px solid $lightgray;
      }
    }
  }
}

$mat-header-row-height: 56px;
$mat-row-height: 48px;
$mat-row-horizontal-padding: 24px;

// Only use tag name selectors here since the styles are shared between MDC and non-MDC
@mixin mat-private-table-flex-styles {
  table.app-table {
    display: block;
  }

  .app-table thead td {
    min-height: $mat-header-row-height;
  }

  .app-table tr {
    min-height: $mat-row-height;
  }

  .app-table th {
    display: flex;
    // Define a border style, but then widths default to 3px. Reset them to 0px except the bottom
    // which should be 1px;
    border-width: 0;
    border-bottom-width: 1px;
    border-style: solid;
    align-items: center;
    box-sizing: border-box;

    // Workaround for https://goo.gl/pFmjJD in IE 11. Adds a pseudo
    // element that will stretch the row the correct height. See:
    // https://connect.microsoft.com/IE/feedback/details/802625
    &::after {
      display: inline-block;
      min-height: inherit;
      content: "";
    }
  }

  .app-table td,
  .app-table th {
    // Note: we use `first-of-type`/`last-of-type` here in order to prevent extra
    // elements like ripples or badges from throwing off the layout (see #11165).
    &:first-of-type {
      padding-left: $mat-row-horizontal-padding;

      [dir="rtl"] &:not(:only-of-type) {
        padding-left: 0;
        padding-right: $mat-row-horizontal-padding;
      }
    }

    &:last-of-type {
      padding-right: $mat-row-horizontal-padding;

      [dir="rtl"] &:not(:only-of-type) {
        padding-right: 0;
        padding-left: $mat-row-horizontal-padding;
      }
    }
  }

  .app-table td,
  .app-table th {
    flex: 1;
    display: flex;
    align-items: center;
    overflow: hidden;
    word-wrap: break-word;
    min-height: inherit;
  }
}

table.p-0 td {
  padding: 0 !important;
}

@include mat-private-table-flex-styles();

@mixin app-table-color($config) {
  $background: map-get($config, background);
  $foreground: map-get($config, foreground);
  .app-table {
    background: mat-color($background, "card");
  }

  .app-table thead,
  .app-table tbody,
  .app-table tfoot,
  mat-header-row,
  mat-row,
  mat-footer-row,
  [mat-header-row],
  [mat-row],
  [mat-footer-row],
  .app-table-sticky {
    background: inherit;
  }

  .app-table th,
  .app-table td {
    border-bottom-color: mat-color($foreground, divider);
  }

  .app-table th {
    color: mat-color($foreground, secondary-text);
  }

  .app-table td {
    color: mat-color($foreground, text);
  }
}

@mixin app-table-typography($config) {
  .app-table {
    font-family: mat-font-family($config);
  }

  .app-table th {
    font-size: mat-font-size($config, caption);
    font-weight: mat-font-weight($config, body-2);
  }

  .app-table td {
    font-size: mat-font-size($config, body-1);
  }
}

@mixin _app-table-density($config-or-theme) {
}

@mixin app-table-theme($config) {
  $theme: mat-private-legacy-get-theme($config);
  @include mat-private-check-duplicate-theme-styles($theme, "mat-table") {
    $is-dark-theme: map-get($config, is-dark);
    @if $is-dark-theme {
    } @else {
    }
    $color: mat-get-color-config($theme);
    $density: mat-get-density-config($theme);
    $typography: mat-get-typography-config($theme);

    @include app-table-color($color);

    @if $density != null {
      @include _app-table-density($density);
    }

    @if $typography != null {
      @include app-table-typography($typography);
    }

    $typographys: mat-get-typography-config($config);

    @if $typographys != null {
      :root {
        --abp-reddd: red;
      }
      body {
        background-color: red !important;
      }
    }
  }
}

table.app-table {
  border-spacing: 0;
}

.app-table tr {
  height: $mat-header-row-height;
}

.app-table tr {
  height: $mat-row-height;
}

.app-table th {
  text-align: left;

  [dir="rtl"] & {
    text-align: right;
  }
}

.app-table th,
.app-table td {
  padding: 0;
  border-bottom-width: 1px;
  border-bottom-style: solid;

  // Note: we use `first-of-type`/`last-of-type` here in order to prevent extra
  // elements like ripples or badges from throwing off the layout (see #11165).
  &:first-of-type {
    padding-left: $mat-row-horizontal-padding;

    [dir="rtl"] &:not(:only-of-type) {
      padding-left: 0;
      padding-right: $mat-row-horizontal-padding;
    }
  }

  &:last-of-type {
    padding-right: $mat-row-horizontal-padding;

    [dir="rtl"] &:not(:only-of-type) {
      padding-right: 0;
      padding-left: $mat-row-horizontal-padding;
    }
  }
}

.app-table-sticky {
  // Note that the table can either set this class or an inline style to make something sticky.
  // We set the style as `!important` so that we get an identical specificity in both cases
  // and to avoid cases where user styles have a higher specificity.
}

.app-table-fixed-layout {
  table-layout: fixed;
}

tr.mat-header-row {
  height: $mat-header-row-height;
}

tr.mat-row,
tr.mat-footer-row {
  height: $mat-row-height;
}

th.mat-header-cell {
  text-align: left;

  [dir="rtl"] & {
    text-align: right;
  }
}

th.mat-header-cell,
td.mat-cell,
td.mat-footer-cell {
  padding: 0;
  border-bottom-width: 1px;
  border-bottom-style: solid;

  // Note: we use `first-of-type`/`last-of-type` here in order to prevent extra
  // elements like ripples or badges from throwing off the layout (see #11165).
  &:first-of-type {
    padding-left: $mat-row-horizontal-padding;

    [dir="rtl"] &:not(:only-of-type) {
      padding-left: 0;
      padding-right: $mat-row-horizontal-padding;
    }
  }

  &:last-of-type {
    padding-right: $mat-row-horizontal-padding;

    [dir="rtl"] &:not(:only-of-type) {
      padding-right: 0;
      padding-left: $mat-row-horizontal-padding;
    }
  }
}

.mat-table-sticky {
  // Note that the table can either set this class or an inline style to make something sticky.
  // We set the style as `!important` so that we get an identical specificity in both cases
  // and to avoid cases where user styles have a higher specificity.
}

.mat-table-fixed-layout {
  table-layout: fixed;
}
